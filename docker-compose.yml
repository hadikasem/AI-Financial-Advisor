# Docker Compose Configuration for Full-Stack Risk Assessment App

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: risk_agent_db
      POSTGRES_USER: risk_agent_user
      POSTGRES_PASSWORD: risk_agent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U risk_agent_user -d risk_agent_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Flask Backend API
  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://risk_agent_user:risk_agent_password@db:5432/risk_agent_db
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - JWT_SECRET_KEY=jwt-secret-key-change-this-in-production
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-3.5-turbo}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-gpt-oss:20b}
      - OLLAMA_HOST=${OLLAMA_HOST:-http://host.docker.internal:11434}
    ports:
      - "5000:5000"
    depends_on:
      - db
    volumes:
      - ./backend:/app
    command: python app.py
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # Streamlit Frontend
  frontend:
    build: ./frontend
    environment:
      - API_BASE_URL=http://backend:5000/api
    ports:
      - "8501:8501"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
    command: streamlit run app.py --server.address 0.0.0.0 --server.port 8501
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  default:
    name: risk_agent_network
